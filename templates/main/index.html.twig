{% extends 'base.html.twig' %}

{% block title %}Planning OPI{% endblock %}

{% block body %}
    {% if is_granted('IS_AUTHENTICATED_FULLY') %}
{#        check if is admin#}
        {% if is_granted('ROLE_ADMIN') %}
            {{ include('calendar/_admin.html.twig') }}

{#            check if is chef de service#}
        {% elseif is_granted('ROLE_CHEFSERVICE') %}
            {{ include('calendar/_chef.html.twig') }}

{#            check if is normal user#}
        {% else %}
            {{ include('calendar/_user.html.twig') }}
        {% endif %}
    {%  else %}
        <div class="container-fluid">
            <div class="row justify-content-center text-center">
                <div class="col-offset-4 col-4">
                    <div class="h1">Merci de vous authentifier</div>
                </div>
            </div>
            <div class="row justify-content-center text-center">
                <div class="col-offset-4 col-4">
                    <a href="{{ path('app_login') }}" class="btn btn-primary">S'authentifier</a>
                </div>
            </div>
        </div>
    {% endif %}
{% endblock %}

{% block javascripts %}
    <script>
        window.onload = () => {
            let totalOfHoursInYearHolder = document.getElementById('totalOfHoursInYear');
            let totalOfHoursInMonthHolder = document.getElementById('totalOfHoursInMonth');
            let totalOfHoursInWeekHolder = document.getElementById('totalOfHoursInWeek');
            let calendarEvents = [];
            let calendarEl = document.querySelector("#calendrier");
            let calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'fr',
                timeZone: 'Europe/Paris',
                firstDay: 1,

                customButtons: {
                    myCustomButton: {
                        text: 'Ajouter un événement',
                        click: function() {
                            window.location.href = "{{ path('calendar_new') }}"
                        }
                    }
                },

                headerToolbar: {
                    start: 'prev,next today dayGridMonth,timeGridWeek',
                    center: 'title',
                    end: 'myCustomButton'
                },
                events: {{ planning|json_encode|raw }},

                eventClick: function(event) {
                    let eventId = event.event._def.publicId;
                    window.location.href = "/calendar/" + eventId + "/edit";
                },

                eventWillUnmount: function(){
                    let durations = [];
                    let currentDate = moment(calendar.getDate());

                    getCalendarEvents(durations);

                    getNumberOfHours(currentDate, durations);
                },

                eventContent: function(info) {
                    let durations = [];
                    let currentDate = moment(calendar.getDate());

                    getCalendarEvents(durations);

                    getNumberOfHours(currentDate, durations);
                },
            });

            function getHourInCurrentWeek(durations, weekStart) {
                let hourInCurrentWeek = 0;

                for (let i = 0; i <= 6; i++) {
                    for (let duration of durations) {
                        let daysHours = duration[moment(weekStart).add(i, 'days').format("YYYY-MM-DD")];

                        if (daysHours !== undefined) {
                            hourInCurrentWeek += daysHours;
                        }
                    }
                }

                return hourInCurrentWeek;
            }

            function getHourInCurrentMonth(durations, currentDate, monthStart) {
                let hourInCurrentMonth = 0;
                for (let i = 0; i <= currentDate.daysInMonth() - 1; i++) {
                    for (let duration of durations) {
                        let daysHours = duration[moment(monthStart).add(i, 'days').format("YYYY-MM-DD")];
                        if (daysHours !== undefined) {
                            hourInCurrentMonth += daysHours;
                        }
                    }
                }

                return hourInCurrentMonth;
            }

            function getHourInCurrentYear(durations, yearStart, yearEnd) {
                let hourInCurrentYear = 0;
                let indexOfTheDay = 0;
                let dateOfEvents = [];

                for (let i = moment(yearStart); i <= moment(yearEnd); i.add(1, 'days')) {
                    for (let duration of durations) {
                        let daysHours = duration[moment(yearStart).add(indexOfTheDay, 'days').format("YYYY-MM-DD")];

                        if (daysHours !== undefined) {
                            dateOfEvents.push(daysHours);
                            hourInCurrentYear += daysHours;
                        }
                    }
                    indexOfTheDay++;
                }

                return hourInCurrentYear;
            }

            function getNumberOfHours(currentDate, durations) {
                let weekStart = currentDate.clone().startOf('isoweek');
                let monthStart = currentDate.startOf('month').format();
                let yearStart = currentDate.startOf('year').format();
                let yearEnd = currentDate.endOf('year').format();

                let hourInCurrentWeek = 0;
                let hourInCurrentMonth = 0;
                let hourInCurrentYear = 0;

                hourInCurrentWeek = parseFloat((getHourInCurrentWeek(durations, weekStart) / 60).toFixed(1));
                hourInCurrentMonth = parseFloat((getHourInCurrentMonth(durations, currentDate, monthStart) / 60).toFixed(1));
                hourInCurrentYear = parseFloat((getHourInCurrentYear(durations, yearStart, yearEnd) / 60).toFixed(1));

                totalOfHoursInYearHolder.getElementsByClassName('hourHolder')[0].innerHTML = hourInCurrentYear;
                totalOfHoursInMonthHolder.getElementsByClassName('hourHolder')[0].innerHTML = hourInCurrentMonth;
                totalOfHoursInWeekHolder.getElementsByClassName('hourHolder')[0].innerHTML = hourInCurrentWeek;

                if(calendar.view.type === 'dayGridMonth'){
                    totalOfHoursInWeekHolder.style.display = 'none';
                    totalOfHoursInMonthHolder.style.display = 'block';
                } else {
                    totalOfHoursInWeekHolder.style.display = 'block';
                    totalOfHoursInMonthHolder.style.display = 'none';
                }
            }

            function getCalendarEvents(durations){
                calendarEvents = calendar.getEvents();
                for(let event of calendarEvents){
                    let endDate = moment(event._instance.range.end);
                    let startDate = moment(event._instance.range.start);
                    let duration = moment.duration(endDate.diff(startDate));
                    let mins = duration.asMinutes();

                    duration[startDate.format('YYYY-MM-DD')] = mins;
                    durations.push(duration);
                }

                return durations;
            }

            // // draggable
            // calendar.on('eventChange', (e) => {
            //     let url = `/api/${e.event.id}/edit`;
            //     let donnees = {
            //         "title": e.event.title,
            //         "description": e.event.extendedProps.description,
            //         "start": e.event.start,
            //         "end": e.event.end,
            //         "backgroundColor": e.event.backgroundColor,
            //         "borderColor": e.event.borderColor,
            //         "textColor": e.event.textColor,
            //         "allDay": e.event.allDay
            //     };
            //     let xhr = new XMLHttpRequest;
            //     xhr.open("PUT", url);
            //     xhr.send(JSON.stringify(donnees));
            // });

            calendar.render();
        };
    </script>
{% endblock %}
